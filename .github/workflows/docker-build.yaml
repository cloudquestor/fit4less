name: Docker Build and Push

on:
  push:
    branches:
      - main
  pull_request:
    types:
      - closed

jobs:
  build-and-push:
    if: github.event.pull_request.merged == true || github.event_name == 'push'
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Build and push workout-api
      - name: Build and push workout-api
        uses: docker/build-push-action@v4
        with:
          context: ./workout-api
          file: ./workout-api/Dockerfile.dev
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/workout-api:latest
            ghcr.io/${{ github.repository_owner }}/workout-api:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Build and push workout-ui
      - name: Build and push workout-ui
        uses: docker/build-push-action@v4
        with:
          context: ./workout-ui
          file: ./workout-ui/Dockerfile.dev
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/workout-ui:latest
            ghcr.io/${{ github.repository_owner }}/workout-ui:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Optional: Create a deployment status
      - name: Create deployment status
        uses: actions/github-script@v6
        with:
          script: |
            const { sha } = context;
            const deployment = {
              ref: sha,
              environment: 'production',
              description: 'Deployment from GitHub Actions',
              auto_merge: false
            };
            await github.rest.repos.createDeployment({
              ...context.repo,
              ...deployment
            });
